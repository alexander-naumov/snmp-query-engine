.TH SNMP\-QUERY\-ENGINE 1 "May 2012" 
.SH NAME
.PP
snmp\-query\-engine \- multiplexing SNMP query engine
.SH VERSION
.PP
This document describes snmp\-query\-engine version 2014050100.
.SH SYNOPSIS
.PP
snmp\-query\-engine
.SH DESCRIPTION
.PP
The \f[C]snmp\-query\-engine\f[] daemon accepts multiple client
connections and performs SNMP queries towards multiple destinations on
behalf of its clients, taking care of multiplexing and throttling the
requests.
This allows querying large number of devices for large amounts of SNMP
information quickly, while controlling the load on the devices induced
by multiple SNMP queries.
.PP
Clients communicate with the \f[C]snmp\-query\-engine\f[] daemon via
TCP.
Both requests and responses are encoded using MessagePack format,
http://msgpack.org/.
.SH OPTIONS
.TP
.B \-h
produce usage text and quit
.RS
.RE
.TP
.B \-p \f[B]prt\f[]
listen on port \f[B]prt\f[] instead of default \f[B]7667\f[]
.RS
.RE
.TP
.B \-q
quiet operation
.RS
.RE
.SH REQUESTS
.PP
All requests are arrays of at least two elements.
.TP
.B parameter 0
The first element must be a request type represented by a small positive
integer: 1 (\f[B]SETOPT\f[]), 2 (\f[B]GETOPT\f[]), 3 (\f[B]INFO\f[]), 4
(\f[B]GET\f[]), 5 (\f[B]GETTABLE\f[]), 6 (\f[B]DEST INFO\f[]).
.RS
.RE
.TP
.B parameter 1
The second element must be a \f[B]request id\f[], represented by a
positive integer.
It is a good idea for every request within a single client session to
have a unique request id, although request ids may be reused \- provided
that the previous request with the same id is no longer active (that is,
the client already got a response).
.RS
.RE
.PP
The rest of request parameters are request type\-specific, and are
described below.
.PP
All responses will be an array of at least two elements.
The \f[B]first element\f[] will be the request type ORed with either
0x10 to indicate a successfull reply, or with 0x20 to indicate an error.
The \f[B]second element\f[] will be the \f[B]request id\f[].
In case of an error, the third, and last, element will be a textual
description of the error.
In case of a successfull reply, the rest of response array elements are
request type\-specific, and are described below.
.SS SETOPT
.PP
The \f[B]SETOPT\f[] request allows the client to change several
per\-destination and per\-destination/client options.
.PP
Please note that setting values for options that are specific for a
destination, and not for a destination/client session, will affect other
clients making requests towards the same destination.
.PP
SETOPT parameters:
.TP
.B parameter 2
destination IP (v4 only) address in a dot\-decimal notation
.RS
.RE
.TP
.B parameter 3
destination port number
.RS
.RE
.TP
.B parameter 4
a map of options
.RS
.RE
.PP
The map of options may contain any number of supported options,
including zero, in which case SETOPT is exactly equivalent to GETOPT.
.PP
Supported options:
.TP
.B \f[B]\f[C]version\f[]\f[]
SNMP version, 1 for SNMP 1, 2 for SNMP 2c; default is \f[B]2\f[].
This is a per destination/client option which does not affect other
clients.
.RS
.RE
.TP
.B \f[B]\f[C]community\f[]\f[]
SNMP community; default is \f[B]"public"\f[].
This is a per destination/client option which does not affect other
clients.
.RS
.RE
.TP
.B \f[B]\f[C]global_max_packets\f[]\f[]
Maximum global number of SNMP packets being "on the wire" at any given
time.
This is a \f[B]global\f[] option which affects all destinations and all
clients.
See also \f[C]max_packets_on_the_wire\f[] statistic for the
\f[B]INFO\f[] request.
.RS
.RE
.TP
.B \f[B]\f[C]max_packets\f[]\f[]
Maximum number of SNMP packets to the destination being "on the wire" at
any given time.
The \f[C]snmp\-query\-engine\f[] will avoid sending any new SNMP
requests exceeding this number until getting a reply or a timeout.
The default is \f[B]3\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]max_req_size\f[]\f[]
Maximum SNMP request packet size in bytes, not counting IP and UDP
headers.
Any request which would exceed this size will be split into smaller
pieces.
Conversely, if there are pending several small requests from the same
client towards the same destination, they may be combined into a single
SNMP request.
The default is \f[B]1400\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]max_reply_size\f[]\f[]
Maximum SNMP reply packet size in bytes, not counting IP and UDP
headers.
When composing a request, the query engine estimates the expected size
of the reply using \f[C]estimated_value_size\f[] option.
If the estimated reply size exceeds \f[C]max_reply_size\f[], the request
will be split into smaller pieces.
This option is only relevant for `get* requests.
The default is \f[B]1472\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]estimated_value_size\f[]\f[]
The expected size of a returned value in bytes.
The default is \f[B]9\f[], which corresponds to the largest possible
64\-bit counter.
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]max_oids_per_request\f[]\f[]
Never ask for more than this number of oids in a single SNMP get query.
The default is \f[B]64\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]timeout\f[]\f[]
Time, in milliseconds, after which the SNMP request will be re\-sent (up
to a configurable number of retries).
The default is \f[B]2000\f[] (which is probably too little).
This is a per destination/client option which does not affect other
clients.
.RS
.RE
.TP
.B \f[B]\f[C]retries\f[]\f[]
Number of times a request will be re\-sent (including the first send),
after which a timeout will be returned to the client.
The default is \f[B]3\f[].
This is a per destination/client option which does not affect other
clients.
.RS
.RE
.TP
.B \f[B]\f[C]min_interval\f[]\f[]
Time, in milliseconds, that must pass between subsequent SNMP queries
towards the destination.
The default is \f[B]10\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]max_repetitions\f[]\f[]
How many OIDs shall the destination return in a single reply when
requesting a table using SNMP 2c.
This can be overridden by individual GETTABLE requests.
The default is \f[B]10\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]ignore_threshold\f[]\f[]
All queries of the destination will immediately return with an "ignored"
error for \f[C]ignore_duration\f[] milliseconds if number of "hard
timeouts" will exceed \f[C]ignore_threshold\f[] in a row (without any
successfull replies between timed out queries).
If \f[C]ignore_threshold\f[] is 0, no queries will be ignored.
The default is \f[B]0\f[].
This is a per destination option which affects other clients.
.RS
.RE
.TP
.B \f[B]\f[C]ignore_duration\f[]\f[]
See \f[C]ignore_threshold\f[] above.
The default is \f[B]300000\f[] milliseconds (5 minutes).
This is a per destination option which affects other clients.
.RS
.RE
.PP
\f[B]SETOPT\f[] reply will consist of a single map with all current
option values for a given destination and client.
.SS GETOPT
.PP
The \f[B]GETOPT\f[] request allows the client to query per\-destination
and per\-destination/client options.
.PP
GETOPT parameters:
.TP
.B parameter 2
destination IP (v4 only) address in a dot\-decimal notation
.RS
.RE
.TP
.B parameter 3
destination port number
.RS
.RE
.PP
\f[B]GETOPT\f[] reply will consist of a single map with all current
options for a given destination (see \f[B]SETOPT\f[] parameters for
options description).
.SS INFO
.PP
The \f[B]INFO\f[] request returns global and connection statistics.
It has no extra parameters.
.PP
\f[B]INFO\f[] reply will consist of a map with two keys,
\f[B]connection\f[] and \f[B]global\f[].
The values associated with those keys are themselves maps with,
respectively, connection and global stats.
.PP
The following statistics are available \f[I]for connection\f[]:
.TP
.B \f[B]\f[C]active_cid_infos\f[]\f[]
number of GET and GETTABLE requests in progress for this connection
.RS
.RE
.TP
.B \f[B]\f[C]active_cr_infos\f[]\f[]
number of destinations queried during this connection
.RS
.RE
.TP
.B \f[B]\f[C]active_sid_infos\f[]\f[]
number of active SNMP requests for this connection
.RS
.RE
.TP
.B \f[B]\f[C]client_requests\f[]\f[]
number of all requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]dest_info_requests\f[]\f[]
number of DEST INFO requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]get_requests\f[]\f[]
number of GET requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]getopt_requests\f[]\f[]
number of GETOPT requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]gettable_requests\f[]\f[]
number of GETTABLE requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]good_snmp_responses\f[]\f[]
number of good SNMP responses received during this connection
.RS
.RE
.TP
.B \f[B]\f[C]info_requests\f[]\f[]
number of INFO requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]invalid_requests\f[]\f[]
number of invalid requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]oids_non_increasing\f[]\f[]
number of table terminations due to non\-increasing oids
.RS
.RE
.TP
.B \f[B]\f[C]oids_requested\f[]\f[]
number of oids requested as part of GET and GETTABLE processing during
this connection
.RS
.RE
.TP
.B \f[B]\f[C]oids_returned_from_snmp\f[]\f[]
number of oids got with SNMP responses during this connection
.RS
.RE
.TP
.B \f[B]\f[C]oids_returned_to_client\f[]\f[]
number of oids returned back to client during this connection
.RS
.RE
.TP
.B \f[B]\f[C]setopt_requests\f[]\f[]
number of SETOPT requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]snmp_retries\f[]\f[]
number of times an SNMP query was retried due to UDP timeout during this
connection
.RS
.RE
.TP
.B \f[B]\f[C]snmp_sends\f[]\f[]
number of SNMP packets sent during this connection
.RS
.RE
.TP
.B \f[B]\f[C]snmp_timeouts\f[]\f[]
number of times timeout was returned back to the client during this
connection; this represents "hard timeouts", that is not getting any
response after configured number of retries
.RS
.RE
.TP
.B \f[B]\f[C]snmp_v1_sends\f[]\f[]
number of SNMP version 1 packets sent during this connection
.RS
.RE
.TP
.B \f[B]\f[C]snmp_v2c_sends\f[]\f[]
number of SNMP version 2c packets sent during this connection
.RS
.RE
.TP
.B \f[B]\f[C]total_cid_infos\f[]\f[]
number of GET and GETTABLE requests made during this connection
.RS
.RE
.TP
.B \f[B]\f[C]total_cr_infos\f[]\f[]
number of destinations queried during this connection; this will always
be the same as \f[C]active_cr_infos\f[] due to the way the daemon is
implemented
.RS
.RE
.TP
.B \f[B]\f[C]total_sid_infos\f[]\f[]
number of SNMP requests performed during this connection
.RS
.RE
.TP
.B \f[B]\f[C]udp_timeouts\f[]\f[]
number of "soft" timeouts during this connection
.RS
.RE
.TP
.B \f[B]\f[C]uptime\f[]\f[]
the duration of the connection in milliseconds
.RS
.RE
.PP
The following \f[I]global\f[] statistics are available:
.TP
.B \f[B]\f[C]active_cid_infos\f[]\f[]
number of GET and GETTABLE requests in progress
.RS
.RE
.TP
.B \f[B]\f[C]active_client_connections\f[]\f[]
number of active client connections
.RS
.RE
.TP
.B \f[B]\f[C]active_cr_infos\f[]\f[]
sum of a number of destinations queried by each active client connection
.RS
.RE
.TP
.B \f[B]\f[C]active_oid_infos\f[]\f[]
number of oids being requested plus number of oids pending return to a
client
.RS
.RE
.TP
.B \f[B]\f[C]active_sid_infos\f[]\f[]
number of active SNMP requests
.RS
.RE
.TP
.B \f[B]\f[C]active_timers_sec\f[]\f[]
number of active timer slots with a second resolution
.RS
.RE
.TP
.B \f[B]\f[C]active_timers_usec\f[]\f[]
number of active timers
.RS
.RE
.TP
.B \f[B]\f[C]bad_snmp_responses\f[]\f[]
number of bad SNMP responses (the responses which were not valid SNMP or
for which a corresponding request could not be found)
.RS
.RE
.TP
.B \f[B]\f[C]client_requests\f[]\f[]
total number of all client requests
.RS
.RE
.TP
.B \f[B]\f[C]dest_info_requests\f[]\f[]
total number of DEST INFO requests
.RS
.RE
.TP
.B \f[B]\f[C]destination_throttles\f[]\f[]
number of times an SNMP query was postponed due to \f[C]min_interval\f[]
and \f[C]max_packets\f[] settings
.RS
.RE
.TP
.B \f[B]\f[C]destination_ignores\f[]\f[]
number of times a destination was put into "ignore" mode via
\f[C]ignore_threshold\f[] and \f[C]ignore_duration\f[] mechanism
.RS
.RE
.TP
.B \f[B]\f[C]get_requests\f[]\f[]
total number of GET requests
.RS
.RE
.TP
.B \f[B]\f[C]getopt_requests\f[]\f[]
total number of GETOPT requests
.RS
.RE
.TP
.B \f[B]\f[C]gettable_requests\f[]\f[]
total number of GETTABLE requests
.RS
.RE
.TP
.B \f[B]\f[C]global_throttles\f[]\f[]
number of times a request was postponed because
\f[C]packets_on_the_wire\f[] reached \f[C]max_packets_on_the_wire\f[]
.RS
.RE
.TP
.B \f[B]\f[C]good_snmp_responses\f[]\f[]
total number of good SNMP responses received
.RS
.RE
.TP
.B \f[B]\f[C]info_requests\f[]\f[]
total number of INFO requests
.RS
.RE
.TP
.B \f[B]\f[C]invalid_requests\f[]\f[]
total number of invalid client requests
.RS
.RE
.TP
.B \f[B]\f[C]max_packets_on_the_wire\f[]\f[]
configured global maximum of SNMP requests "in progress"; when
\f[C]packets_on_the_wire\f[] reaches this number, no new SNMP requests
will be sent until \f[C]packets_on_the_wire\f[] falls below
\f[C]max_packets_on_the_wire\f[] again; see \f[C]global_max_packets\f[]
\f[C]SETOPT\f[] parameter
.RS
.RE
.TP
.B \f[B]\f[C]oids_non_increasing\f[]\f[]
number of table terminations due to non\-increasing oids
.RS
.RE
.TP
.B \f[B]\f[C]oids_requested\f[]\f[]
total number of oids requested as part of GET and GETTABLE processing
.RS
.RE
.TP
.B \f[B]\f[C]oids_returned_from_snmp\f[]\f[]
total number of oids got with SNMP responses
.RS
.RE
.TP
.B \f[B]\f[C]oids_returned_to_client\f[]\f[]
total number of oids returned back to clients
.RS
.RE
.TP
.B \f[B]\f[C]oids_ignored\f[]\f[]
total number of oids ignored via \f[C]ignore_threshold\f[] and
\f[C]ignore_duration\f[] mechanism
.RS
.RE
.TP
.B \f[B]\f[C]octets_received\f[]\f[]
total number of payload octets received via SNMP
.RS
.RE
.TP
.B \f[B]\f[C]octets_sent\f[]\f[]
total number of payload octets sent to SNMP destinations
.RS
.RE
.TP
.B \f[B]\f[C]packets_on_the_wire\f[]\f[]
number of SNMP requests "in progress"
.RS
.RE
.TP
.B \f[B]\f[C]setopt_requests\f[]\f[]
total number of SETOPT requests
.RS
.RE
.TP
.B \f[B]\f[C]snmp_retries\f[]\f[]
total number of times an SNMP query was retried due to UDP timeout
.RS
.RE
.TP
.B \f[B]\f[C]snmp_sends\f[]\f[]
total number of SNMP packets sent
.RS
.RE
.TP
.B \f[B]\f[C]snmp_timeouts\f[]\f[]
total number of times a timeout was returned back to a client; this
represents "hard timeouts", that is not getting any response after
configured number of retries
.RS
.RE
.TP
.B \f[B]\f[C]snmp_v1_sends\f[]\f[]
total number of SNMP version 1 packets sent
.RS
.RE
.TP
.B \f[B]\f[C]snmp_v2c_sends\f[]\f[]
total number of SNMP version 2c packets sent
.RS
.RE
.TP
.B \f[B]\f[C]total_cid_infos\f[]\f[]
total number of GET and GETTABLE requests made
.RS
.RE
.TP
.B \f[B]\f[C]total_client_connections\f[]\f[]
total number of client connections
.RS
.RE
.TP
.B \f[B]\f[C]total_cr_infos\f[]\f[]
total sum of a number of destinations queried by each client connection
.RS
.RE
.TP
.B \f[B]\f[C]total_oid_infos\f[]\f[]
total number of oids requested and returned to a client
.RS
.RE
.TP
.B \f[B]\f[C]total_sid_infos\f[]\f[]
total number of SNMP requests performed
.RS
.RE
.TP
.B \f[B]\f[C]total_timers_sec\f[]\f[]
total number of timer slots with a second resolution
.RS
.RE
.TP
.B \f[B]\f[C]total_timers_usec\f[]\f[]
total number of timers
.RS
.RE
.TP
.B \f[B]\f[C]udp_receive_buffer_size\f[]\f[]
the size of UDP receive buffer for SNMP socket
.RS
.RE
.TP
.B \f[B]\f[C]udp_send_buffer_size\f[]\f[]
the size of UDP send buffer for SNMP socket
.RS
.RE
.TP
.B \f[B]\f[C]udp_send_buffer_overflow\f[]\f[]
number of times a UDP packet could not be sent due to a send buffer
overflow
.RS
.RE
.TP
.B \f[B]\f[C]udp_timeouts\f[]\f[]
total number of "soft" timeouts
.RS
.RE
.TP
.B \f[B]\f[C]uptime\f[]\f[]
daemon uptime in milliseconds
.RS
.RE
.TP
.B \f[B]\f[C]program_version\f[]\f[]
version of the engine program
.RS
.RE
.SS GET
.PP
Clients should use the \f[B]GET\f[] request to obtain one or more oids
from a destination.
A single \f[B]GET\f[] request will correspond to one or more SNMP gets,
depending on the values of \f[I]\f[C]max_req_size\f[]\f[],
\f[I]\f[C]max_reply_size\f[]\f[],
\f[I]\f[C]estimated_value_size\f[]\f[], and
\f[I]\f[C]max_oids_per_request\f[]\f[] options.
.PP
GET parameters:
.TP
.B parameter 2
destination IP (v4 only) address in a dot\-decimal notation
.RS
.RE
.TP
.B parameter 3
destination port number
.RS
.RE
.TP
.B parameter 4
an array of oids to get
.RS
.RE
.PP
\f[B]GET\f[] reply consists of an array, each element of which
corresponds to a single requested oid.
Each such element is itself a two\-element array.
The first element will be oid itself.
The second element will either be a value, or an array with a single
element.
If it is an array, its only element will be an error description.
Possible errors are:
.TP
.B no\-such\-object
SNMP reply returned "no such object" for this oid
.RS
.RE
.TP
.B no\-such\-instance
SNMP reply returned "no such instance" for this oid
.RS
.RE
.TP
.B end\-of\-mib
SNMP reply returned "end\-of\-mib" for this oid
.RS
.RE
.TP
.B timeout
there was a timeout; for \f[B]GET\f[] requests with a small number of
oids, in case of timeout all oids will generally return this error; for
larger \f[B]GET\f[] requests, it is perfectly possible to get this error
for only some of the oids
.RS
.RE
.TP
.B ignored
the oid was requested during time when its destination was in the
"ignore" state (see \f[C]ignore_threshold\f[] and
\f[C]ignore_duration\f[] options for details)
.RS
.RE
.TP
.B missing
the oid not found in the reply
.RS
.RE
.TP
.B decode\-error
there was an error decoding the value
.RS
.RE
.TP
.B unsupported type 0xHH
the \f[C]snmp\-query\-engine\f[] does not support values of this type
(yet)
.RS
.RE
.PP
Example request:
.IP
.nf
\f[C]
[GET,\ $id,\ "127.0.0.1",\ 161,
\ \ \ [\ "1.3.6.1.2.1.1.5.0",
\ \ \ \ \ "1.3.6.1.2.1.25.1.1.0",
\ \ \ \ \ "1.3.66"\ ]
]
\f[]
.fi
.PP
Example reply:
.IP
.nf
\f[C]
[GET|0x10,\ $id,\ [
\ \ \ ["1.3.6.1.2.1.1.5.0",\ "my.host.name"],
\ \ \ ["1.3.6.1.2.1.25.1.1.0",\ 215485727],
\ \ \ ["1.3.66",\ ["no\-such\-object"]],
\ ],
]
\f[]
.fi
.SS GETTABLE
.PP
Clients should use the \f[B]GETTABLE\f[] request to obtain a table of
oids from a destination.
A single \f[B]GETTABLE\f[] request will correspond to one or more SNMP
get\-next (for SNMP version 1) or get\-bulk (for SNMP version 2)
queries.
.PP
GETTABLE parameters:
.TP
.B parameter 2
destination IP (v4 only) address in a dot\-decimal notation
.RS
.RE
.TP
.B parameter 3
destination port number
.RS
.RE
.TP
.B parameter 4
an oid of a table to get
.RS
.RE
.PP
\f[B]GETTABLE\f[] reply consists of an array, each element of which
corresponds to a single oid from the requested table.
Each such element is itself a two\-element array.
The first element will be oid itself.
The second element will either be a value, or an array with a single
element.
If it is an array, its only element will be an error description.
Possible errors are the same as in \f[B]GET\f[] request, plus the
following error specific to \f[B]GETTABLE\f[]:
.TP
.B non\-increasing
this oid is less than or equal than the previous oid in the table; there
will be no further attempts to continue iterating the table
.RS
.RE
.PP
The requested table oid is never present in the reply itself if there
were no errors.
.PP
Example request 1:
.IP
.nf
\f[C]
[GETTABLE,\ $id,\ "127.0.0.1",\ 161,\ "1.3.6.1.2.1.1.5"]
\f[]
.fi
.PP
Example reply 1:
.IP
.nf
\f[C]
[GETTABLE|0x10,\ $id,\ [["1.3.6.1.2.1.1.5.0",\ "my.host.name"]]]
\f[]
.fi
.PP
Example request 2:
.IP
.nf
\f[C]
[GETTABLE,\ $id,\ "127.0.0.1",\ 161,\ "1.3.6.1.2.1.1.5.0"]
\f[]
.fi
.PP
Example reply 2 ("empty table"):
.IP
.nf
\f[C]
[GETTABLE|0x10,\ $id,\ []]
\f[]
.fi
.PP
Example request 3:
.IP
.nf
\f[C]
[GETTABLE,\ $id,\ "1.1.1.1",\ 161,\ "1.3.6.1.2.1.1.5"]
\f[]
.fi
.PP
Example reply 3 ("table oid itself in error reply"):
.IP
.nf
\f[C]
[GETTABLE|0x10,\ 41,\ [["1.3.6.1.2.1.1.5",\ ["timeout"]]]]
\f[]
.fi
.PP
Example request 4:
.IP
.nf
\f[C]
[GETTABLE,\ $id,\ "ip\-of\-some\-misbehaving\-host",\ 161,\ "1.3.6.1.2.1.1.5"]
\f[]
.fi
.PP
Example reply 4:
.IP
.nf
\f[C]
[GETTABLE|0x10,\ $id,\ [
\ \ ["1.3.6.1.2.1.1.5.0",\ "my.host.name"],
\ \ ["1.3.6.1.2.1.1.5.0",\ ["non\-increasing"]],
]]
\f[]
.fi
.SS DEST INFO
.PP
The \f[B]DEST INFO\f[] request allows the client to request
per\-destination statistics.
.PP
DEST INFO parameters:
.TP
.B parameter 2
destination IP (v4 only) address in a dot\-decimal notation
.RS
.RE
.TP
.B parameter 3
destination port number
.RS
.RE
.PP
\f[B]DEST INFO\f[] reply will consist of a map per\-destination
statistics.
.PP
The following statistics are available:
.TP
.B \f[B]\f[C]octets_received\f[]\f[]
number of payload octets received from the destination
.RS
.RE
.TP
.B \f[B]\f[C]octets_sent\f[]\f[]
number of payload octets sent to the destination
.RS
.RE
.SH SEE ALSO
.PP
There is a Perl module which serves as a client to
\f[C]snmp\-query\-engine\f[], \f[B]Net::SNMP::QueryEngine::AnyEvent\f[].
It can be found on CPAN and on github.
.SH ACKNOWLEDGEMENTS
.PP
This work is in part sponsored by Telia Denmark.
.PP
Thanks to Henrik Andersen and Lars Thegler for discussions and insights.
.SH AUTHORS
Anton Berezin.
